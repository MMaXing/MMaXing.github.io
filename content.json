[{"title":"Linux常用指令","slug":"Linux常用指令","date":"2018-12-01T09:30:18.000Z","updated":"2018-12-03T09:58:38.893Z","comments":true,"path":"2018/12/01/Linux常用指令/","link":"","permalink":"http://yoursite.com/2018/12/01/Linux常用指令/","excerpt":"Linux常用命令1. cd切换目录，相对路径或绝对路径 cd /user/data &nbsp;&nbsp;# 绝对路径cd ./path &nbsp;&nbsp;# 相对路径，“.”表示当前目录，“..”上一级路径cd ../path","text":"Linux常用命令1. cd切换目录，相对路径或绝对路径 cd /user/data &nbsp;&nbsp;# 绝对路径cd ./path &nbsp;&nbsp;# 相对路径，“.”表示当前目录，“..”上一级路径cd ../path 2. ls查看文件与目录的命令 -a：all文件，包括”.”开头的隐藏文件-l：list,文件详细信息-R：递归，展示子目录ls -lR &nbsp;&nbsp;#当前目录下所有文件，目录的详细资料 3. grep一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来 grep [选项] ”模式“ [文件]-i : 忽略大小写-v ：invert，颠倒展示未匹配到的-E ：开启扩展（Extend）的正则表达tail -1000f filename | grep -i error 4. rm该命令用于删除文件或目录，remove之间，它的常用参数如下： -f ：强制删除 &nbsp;&nbsp;-r ：递归删除 &nbsp;&nbsp;-i ：删除提示rm -fr dir &nbsp;&nbsp;# 强制删除目录dir中的所有文件 5.ps该命令用于将某个时间点的进程运行情况选取下来并输出，process之意，它的常用参数如下： -A ：所有的进程均显示出来-a ：不与terminal有关的所有进程-u ：有效用户的相关进程-x ：一般与a参数一起使用，可列出较完整的信息-l ：较长，较详细地将PID的信息列出ps常用参数搭配#ps -aux | grep tomcat &nbsp;&nbsp;查看某个进程是否启用ps -lA &nbsp;&nbsp;# 查看系统所有的进程数据ps aux –sort=-%cpu &nbsp;&nbsp;#按照CPU降序 –sort=+rss内存升序排列 6.kill删除执行中的程序或工作。通常与ps和jobs命令一起使用 1:启动被终止的进程&nbsp;&nbsp;2:中断&nbsp;&nbsp;9:强制中断&nbsp;&nbsp;15:正常终止&nbsp;&nbsp;17:暂停kill -signal参数 PIDkill -9 PID 7.top实时显示系统中各个进程的资源占用状况,可以通过用户按键(Ctrl+L)来不断刷新当前状态。 top -p 进程id #可以一秒一次跟踪cpu的使用情况mpstat -P ALL #查看多核CPU命令 sar -P ALL&gt;a.txt 8.df查看磁盘空间使用情况9.netstat可显示当前服务器上所有端口及进程服务，于grep结合可查看某个具体端口及服务情况 -t： 显示TCP端口&nbsp;&nbsp;-u: 指明显示UDP端口&nbsp;&nbsp; -n : 不进行DNS轮询，显示IP-l: 显示监听套接字&nbsp;&nbsp;-p: 显示进程标识符和程序名称netstat -ntlp &nbsp;&nbsp;#查看当前所有tcp端口·netstat -ntulp |grep 80 &nbsp;&nbsp;#查看80端口使用情况·netstat -anp | grep 3306 &nbsp;&nbsp;#查看3306端口使用情况·lsof -i:端口号 来查看当前有哪些程序占用了某个端口 参考连接：初窥Linux 之 我最常用的20条命令","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Jmeter-BeanShell使用","slug":"Jmeter-BeanShell使用","date":"2018-11-27T12:24:52.000Z","updated":"2018-12-02T07:01:05.812Z","comments":true,"path":"2018/11/27/Jmeter-BeanShell使用/","link":"","permalink":"http://yoursite.com/2018/11/27/Jmeter-BeanShell使用/","excerpt":"","text":"","categories":[],"tags":[{"name":"JMeter","slug":"JMeter","permalink":"http://yoursite.com/tags/JMeter/"}]},{"title":"jmeter学习笔记-1","slug":"jmeter学习笔记-1","date":"2018-06-24T07:25:14.000Z","updated":"2018-12-03T12:13:56.858Z","comments":true,"path":"2018/06/24/jmeter学习笔记-1/","link":"","permalink":"http://yoursite.com/2018/06/24/jmeter学习笔记-1/","excerpt":"day1:受苦比改变现状容易的多 #常用测试元件1.线程组线程组是任何测试计划的起点，所有的逻辑控制器和采样器都必须放在线程组之下。用来管理执行测试所需的Jmeter线程。通过线程组面板可以：","text":"day1:受苦比改变现状容易的多 #常用测试元件1.线程组线程组是任何测试计划的起点，所有的逻辑控制器和采样器都必须放在线程组之下。用来管理执行测试所需的Jmeter线程。通过线程组面板可以：线程数：设置线程数量。Ramp-Up Period(in seconds)：设置线程启动周期。循环次数：设置循环次数，勾选永远时，一般和调度器配合使用。调度器：可以设定测试运行的“启动时间”和“结束时间”，但当设定了“启动延迟”会使“启动时间”无效，设定“持续时间”会使“结束时间”无效。2.控制器JMeter有两种类型的控制器：采样器和逻辑控制器。采样器被用来向服务器发送请求，逻辑控制器用来控制JMeter的测试逻辑。 采样器 采样器发送请求到指定服务器，按在测试树中的顺序执行，配合逻辑控制器，可以改变运行次数。常用的采样器：HTTP Request, JDBC Request, Java object Request…逻辑控制器 逻辑控制器，包括两类无件，一类是用于控制test plan 中 sampler 节点发送请求的逻辑顺序的控制器，常用的有 如果（If）控制器 、 switch Controller 、Runtime Controller、循环控制器等。另一类是用来组织可控制 sampler 来节点的， 如 事务控制器、吞吐量控制器。","categories":[],"tags":[{"name":"JMeter","slug":"JMeter","permalink":"http://yoursite.com/tags/JMeter/"}]},{"title":"你好，hexo","slug":"你好，hexo","date":"2018-06-23T07:32:54.000Z","updated":"2018-12-02T07:00:12.295Z","comments":true,"path":"2018/06/23/你好，hexo/","link":"","permalink":"http://yoursite.com/2018/06/23/你好，hexo/","excerpt":"用博客记录学习，给自己点动力 学习使用markdown写博客1.了解hexo基本操作 在列表项目里放进引用hexo new “博客title” #创建一篇文章hexo g #生成静态文件hexo s #启动服务，本地调试hexo d #部署网站，到远端git hexo g -d #生成文件并部署hexo clean #清理缓存文件","text":"用博客记录学习，给自己点动力 学习使用markdown写博客1.了解hexo基本操作 在列表项目里放进引用hexo new “博客title” #创建一篇文章hexo g #生成静态文件hexo s #启动服务，本地调试hexo d #部署网站，到远端git hexo g -d #生成文件并部署hexo clean #清理缓存文件 this a link inline link 2.创建简单的测试计划 这是个代码区块 print(&quot;code block&quot;) 3.断言，查看结果 会自己缩进吗？缩进 强调 强调 4.好多知识等你学呢QAQ","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-06-23T07:12:37.711Z","updated":"2018-06-23T07:12:37.711Z","comments":true,"path":"2018/06/23/hello-world/","link":"","permalink":"http://yoursite.com/2018/06/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]